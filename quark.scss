/**
 * The standard normalise and reset
 */
		@import "base/normalise";
		@import "base/reset";


/**
 * Base settings and configuration.
 */
	// CONFIG
	// This should be your first stop for all project setup.
	// In it you set up breakpoints, gutters and corset widths and turn
	// devmode on or off.
	// Also decide whether you want to output all declarative mixins
	// as their own classes to be used in the markup.
		@import "settings/config";
		@import "settings/functions";

	// VARS
	// Your own ad-hoc project specific variables
		@import "settings/vars";

	// MIXINS
	// Decide which mixins you'd like to include in the project here
		@import "settings/mixins";

	// UTILTIES
	// Some basic utility classes
		@import "settings/utilities";
		@import "settings/fonts";
		@import 'settings/devmode';


/**
 * Objects
 * Objects are unthemed, OOCSS based classes for use primarily in layout.
 * Any theme-agnostic, abstracted classes should go in here.
 * The classes herein rely on various settings configured within config.scss
 */
	// BLOCKS
	// Used to wrap various pieces of markup and maintain
	// standard widths and gutters
		@import "objects/blocks";

	// GRIDS
	// An inline-block based grid system with modifier classes for
	// gutter sizes and reading order
		@import "objects/grid";

	// WIDTHS
	// Human readable width divisions at the breakpoints defined in config.scss
		@import "objects/widths";

	// PAIRS
	// Based on the media object, renamed to be more abstract
	// http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/
		@import "objects/pair-object";

	// ORPHANLESS GRIDS
	// An experiment in CSS quantity queries and maintaining CSS-only
	// orphanless grids.
	// Can be CSS heavy, don't include if you don't need them
		//@import "objects/orphanless-grid";

	// YOURS

/**
 * Components
 * Components are often themed, usually design specific elements.
 * This is where the majority of CSS will sit. You should try and
 * maintain an OOCSS approach.
 */

	@import "components/buttons";
	@import "components/typography";


/**
 * Modules
 * Modules are collections of components.
 * For instance the header may contain a number of buttons
 * and the nav component. The header module will lay out
 * these components
 */
	//@import "modules/header";
